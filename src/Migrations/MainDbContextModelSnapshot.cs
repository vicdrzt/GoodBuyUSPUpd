// <auto-generated />
using System;
using GoodbyeUsp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoodbyeUsp.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GoodbyeUsp.Models.Citizen", b =>
                {
                    b.Property<int>("CitizenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitizenId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Fam")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Otch")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Vlad")
                        .HasColumnType("int");

                    b.HasKey("CitizenId");

                    b.HasIndex("ClientId");

                    b.ToTable("Citizens");
                });

            modelBuilder.Entity("GoodbyeUsp.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Abcode")
                        .IsRequired()
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("varchar(18)");

                    b.Property<string>("Charflat")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<int>("ClientTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("CodeEic")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<short>("CodeExchange")
                        .HasColumnType("smallint");

                    b.Property<short>("CodeOwner")
                        .HasColumnType("smallint");

                    b.Property<int>("Codehouse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateclose")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Datecreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Nflat")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<int>("TypeSob")
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.HasIndex("CodeExchange");

                    b.HasIndex("CodeOwner");

                    b.HasIndex("Codehouse");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("GoodbyeUsp.Models.Disloc", b =>
                {
                    b.Property<int>("Codehouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codehouse"), 1L, 1);

                    b.Property<string>("Charhouse")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<short>("Codeenergyareal")
                        .HasColumnType("smallint");

                    b.Property<int>("Codehabit")
                        .HasColumnType("int");

                    b.Property<int>("Codejek")
                        .HasColumnType("int");

                    b.Property<short>("Coder")
                        .HasColumnType("smallint");

                    b.Property<short>("Codestreet")
                        .HasColumnType("smallint");

                    b.Property<int?>("Nfloor")
                        .HasColumnType("int");

                    b.Property<int>("Nhouse")
                        .HasColumnType("int");

                    b.HasKey("Codehouse");

                    b.HasIndex("Codeenergyareal");

                    b.HasIndex("Coder");

                    b.HasIndex("Codestreet");

                    b.ToTable("Dislocs");
                });

            modelBuilder.Entity("GoodbyeUsp.Models.EnergyAreal", b =>
                {
                    b.Property<short>("CodeEnergyAreal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("CodeEnergyAreal"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CodeEnergyAreal");

                    b.ToTable("EnergyAreals");

                    b.HasData(
                        new
                        {
                            CodeEnergyAreal = (short)1,
                            Name = "Андрушівський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)2,
                            Name = "Баранівський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)3,
                            Name = "Бердичівський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)4,
                            Name = "Брусилівський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)6,
                            Name = "Ємільчинський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)7,
                            Name = "Житомирський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)8,
                            Name = "Зарічанський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)9,
                            Name = "Коростенський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)11,
                            Name = "Коростишівський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)13,
                            Name = "Любарський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)14,
                            Name = "Малинський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)16,
                            Name = "Новоград-Волинський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)17,
                            Name = "Овруцький РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)18,
                            Name = "Олевський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)19,
                            Name = "Попільнянський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)23,
                            Name = "Пулинський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)20,
                            Name = "Радомишльський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)21,
                            Name = "Романівський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)5,
                            Name = "Хорошівський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)24,
                            Name = "Черняхівський РЕМ"
                        },
                        new
                        {
                            CodeEnergyAreal = (short)25,
                            Name = "Чуднівський РЕМ"
                        });
                });

            modelBuilder.Entity("GoodbyeUsp.Models.Firme", b =>
                {
                    b.Property<short>("CodeFirme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("CodeFirme"), 1L, 1);

                    b.Property<short>("CodeGroup")
                        .HasColumnType("smallint");

                    b.Property<string>("NameFirme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CodeFirme");

                    b.ToTable("Firmes");

                    b.HasData(
                        new
                        {
                            CodeFirme = (short)101,
                            CodeGroup = (short)8,
                            NameFirme = "АТ \"Житомирробленерго\""
                        },
                        new
                        {
                            CodeFirme = (short)102,
                            CodeGroup = (short)8,
                            NameFirme = "АТ \"Укрзалізниця\""
                        },
                        new
                        {
                            CodeFirme = (short)201,
                            CodeGroup = (short)7,
                            NameFirme = "Андрушівський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)202,
                            CodeGroup = (short)7,
                            NameFirme = "Баранівський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)203,
                            CodeGroup = (short)7,
                            NameFirme = "Бердичівський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)204,
                            CodeGroup = (short)7,
                            NameFirme = "Брусилівський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)206,
                            CodeGroup = (short)7,
                            NameFirme = "Ємільчинський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)207,
                            CodeGroup = (short)7,
                            NameFirme = "Житомирський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)208,
                            CodeGroup = (short)7,
                            NameFirme = "Зарічанський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)209,
                            CodeGroup = (short)7,
                            NameFirme = "Коростенський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)211,
                            CodeGroup = (short)7,
                            NameFirme = "Коростишівський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)213,
                            CodeGroup = (short)7,
                            NameFirme = "Любарський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)214,
                            CodeGroup = (short)7,
                            NameFirme = "Малинський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)216,
                            CodeGroup = (short)7,
                            NameFirme = "Новоград-Волинський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)217,
                            CodeGroup = (short)7,
                            NameFirme = "Овруцький ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)218,
                            CodeGroup = (short)7,
                            NameFirme = "Олевський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)219,
                            CodeGroup = (short)7,
                            NameFirme = "Попільнянський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)223,
                            CodeGroup = (short)7,
                            NameFirme = "Пулинський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)220,
                            CodeGroup = (short)7,
                            NameFirme = "Радомишльський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)221,
                            CodeGroup = (short)7,
                            NameFirme = "Романівський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)205,
                            CodeGroup = (short)7,
                            NameFirme = "Хорошівський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)224,
                            CodeGroup = (short)7,
                            NameFirme = "Черняхівський ЦОК"
                        },
                        new
                        {
                            CodeFirme = (short)225,
                            CodeGroup = (short)7,
                            NameFirme = "Чуднівський ЦОК"
                        });
                });

            modelBuilder.Entity("GoodbyeUsp.Models.Region", b =>
                {
                    b.Property<short>("Coder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Coder"), 1L, 1);

                    b.Property<string>("Namerg")
                        .IsRequired()
                        .HasMaxLength(27)
                        .IsUnicode(false)
                        .HasColumnType("varchar(27)");

                    b.HasKey("Coder");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("GoodbyeUsp.Models.Street", b =>
                {
                    b.Property<short>("CodeStreet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("CodeStreet"), 1L, 1);

                    b.Property<string>("NameStr")
                        .IsRequired()
                        .HasMaxLength(27)
                        .IsUnicode(false)
                        .HasColumnType("varchar(27)");

                    b.Property<string>("TypeStr")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.HasKey("CodeStreet");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("GoodbyeUsp.Models.Citizen", b =>
                {
                    b.HasOne("GoodbyeUsp.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("GoodbyeUsp.Models.CopyDoc", "Docs", b1 =>
                        {
                            b1.Property<int>("Citizenid")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("Codetype")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("DocDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("DocInstance")
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("DocNumber")
                                .IsRequired()
                                .HasMaxLength(15)
                                .IsUnicode(false)
                                .HasColumnType("varchar(15)");

                            b1.HasKey("Citizenid", "Id");

                            b1.ToTable("CitizenDocs", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("Citizenid");
                        });

                    b.Navigation("Client");

                    b.Navigation("Docs");
                });

            modelBuilder.Entity("GoodbyeUsp.Models.Client", b =>
                {
                    b.HasOne("GoodbyeUsp.Models.Firme", null)
                        .WithMany()
                        .HasForeignKey("CodeExchange")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoodbyeUsp.Models.Firme", null)
                        .WithMany()
                        .HasForeignKey("CodeOwner")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoodbyeUsp.Models.Disloc", "House")
                        .WithMany()
                        .HasForeignKey("Codehouse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("GoodbyeUsp.Models.Equipment", "Equipments", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<int>("Codeequip")
                                .HasColumnType("int");

                            b1.Property<DateTime>("DateBegin")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DateEnd")
                                .HasColumnType("datetime2");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("ClientId", "Codeequip", "DateBegin");

                            b1.ToTable("Equipments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsMany("GoodbyeUsp.Models.GraphPay", "GraphPays", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("DateBegin")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("DateEnd")
                                .HasColumnType("datetime2");

                            b1.Property<decimal>("Debt")
                                .HasPrecision(16, 2)
                                .HasColumnType("decimal(16,2)");

                            b1.HasKey("ClientId", "DateBegin");

                            b1.ToTable("GraphPays", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsMany("GoodbyeUsp.Models.MonetizedDiscount", "MonetizedDiscounts", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("DateBank")
                                .HasColumnType("datetime2");

                            b1.Property<decimal>("SummPay")
                                .HasPrecision(16, 2)
                                .HasColumnType("decimal(16,2)");

                            b1.HasKey("ClientId", "DateBank");

                            b1.ToTable("MonetizedDiscounts", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsMany("GoodbyeUsp.Models.MonthConsum", "MonthConsums", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Month")
                                .HasColumnType("datetime2");

                            b1.Property<int>("BeginDay")
                                .HasColumnType("int");

                            b1.Property<int>("EndDay")
                                .HasColumnType("int");

                            b1.Property<int>("Value1")
                                .HasColumnType("int");

                            b1.Property<int?>("Value21")
                                .HasColumnType("int");

                            b1.Property<int?>("Value22")
                                .HasColumnType("int");

                            b1.Property<int?>("Value31")
                                .HasColumnType("int");

                            b1.Property<int?>("Value32")
                                .HasColumnType("int");

                            b1.Property<int?>("Value33")
                                .HasColumnType("int");

                            b1.HasKey("ClientId", "Month");

                            b1.ToTable("MonthConsumes", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsMany("GoodbyeUsp.Models.Pay375", "Pay375s", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("DateBank")
                                .HasColumnType("datetime2");

                            b1.Property<decimal>("SummPay")
                                .HasPrecision(16, 2)
                                .HasColumnType("decimal(16,2)");

                            b1.HasKey("ClientId", "DateBank");

                            b1.ToTable("Payments375", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsMany("GoodbyeUsp.Models.Pay64", "Pay64s", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("DateBank")
                                .HasColumnType("datetime2");

                            b1.Property<decimal>("SummPay")
                                .HasPrecision(16, 2)
                                .HasColumnType("decimal(16,2)");

                            b1.HasKey("ClientId", "DateBank");

                            b1.ToTable("Payments64", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsMany("GoodbyeUsp.Models.Payment", "Payments", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("DateBank")
                                .HasColumnType("datetime2");

                            b1.Property<decimal>("SummPay")
                                .HasPrecision(16, 2)
                                .HasColumnType("decimal(16,2)");

                            b1.HasKey("ClientId", "DateBank");

                            b1.ToTable("Payments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsMany("GoodbyeUsp.Models.Subsidy", "Subsidies", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("DateBank")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DateBegin")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DateEnd")
                                .HasColumnType("datetime2");

                            b1.Property<decimal>("SummPay")
                                .HasPrecision(16, 2)
                                .HasColumnType("decimal(16,2)");

                            b1.HasKey("ClientId", "DateBank");

                            b1.ToTable("Subsidies", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsMany("GoodbyeUsp.Models.TypeTarif", "TypeTarifs", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("DateBegin")
                                .HasColumnType("datetime2");

                            b1.Property<short>("CodeTypeTarif")
                                .HasColumnType("smallint");

                            b1.Property<DateTime?>("DateEnd")
                                .HasColumnType("datetime2");

                            b1.HasKey("ClientId", "DateBegin");

                            b1.ToTable("TypeTarifs", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("GoodbyeUsp.Models.FactStart", "FactStart", b1 =>
                        {
                            b1.Property<int>("Clientid")
                                .HasColumnType("int");

                            b1.Property<DateTime>("DateFact")
                                .HasColumnType("datetime2");

                            b1.Property<decimal>("Saldo")
                                .HasPrecision(16, 2)
                                .HasColumnType("decimal(16,2)");

                            b1.HasKey("Clientid");

                            b1.ToTable("FactStarts", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("Clientid");
                        });

                    b.Navigation("Equipments");

                    b.Navigation("FactStart")
                        .IsRequired();

                    b.Navigation("GraphPays");

                    b.Navigation("House");

                    b.Navigation("MonetizedDiscounts");

                    b.Navigation("MonthConsums");

                    b.Navigation("Pay375s");

                    b.Navigation("Pay64s");

                    b.Navigation("Payments");

                    b.Navigation("Subsidies");

                    b.Navigation("TypeTarifs");
                });

            modelBuilder.Entity("GoodbyeUsp.Models.Disloc", b =>
                {
                    b.HasOne("GoodbyeUsp.Models.EnergyAreal", null)
                        .WithMany()
                        .HasForeignKey("Codeenergyareal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoodbyeUsp.Models.Region", "Gregion")
                        .WithMany()
                        .HasForeignKey("Coder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoodbyeUsp.Models.Street", "GStreet")
                        .WithMany()
                        .HasForeignKey("Codestreet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GStreet");

                    b.Navigation("Gregion");
                });
#pragma warning restore 612, 618
        }
    }
}
